import logging
import os
import asyncio
import telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    CallbackContext,
    filters
)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
import fcntl
lock_file = None

def acquire_lock():
    global lock_file
    lock_file = open('bot.lock', 'w')
    try:
        fcntl.flock(lock_file, fcntl.LOCK_EX | fcntl.LOCK_NB)
        logger.info("üîí –§–∞–π–ª–æ–≤–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        return True
    except (IOError, BlockingIOError):
        logger.warning("‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å.")
        return False

# ==================== –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø ====================
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("httpcore").setLevel(logging.WARNING)

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

file_handler = logging.FileHandler('bot.log')
file_handler.setFormatter(formatter)
stream_handler = logging.StreamHandler()
stream_handler.setFormatter(formatter)

logger.addHandler(file_handler)
logger.addHandler(stream_handler)

# ==================== –ó–ê–©–ò–¢–ê –û–¢ –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø ====================
def prevent_multiple_instances():
    if not acquire_lock():
        exit(1)

prevent_multiple_instances()

# ==================== –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ù–ê–°–¢–†–û–ô–ö–ò ====================
TOKEN = os.getenv('TELEGRAM_TOKEN')

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å —Ü–µ–Ω–∞–º–∏
MATERIALS = {
    '–±–∞–Ω–µ—Ä': {
        '–õ–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π': 350,
        '–õ–∏—Ç–æ–π': 400, 
        '–î–≤—É—Ö—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π': 450
    },
    '–ø–ª–µ–Ω–∫–∞': {
        '–° –ª–∞–º–∏–Ω–∞—Ü–∏–µ–π': 550,
        '–ë–µ–∑ –ª–∞–º–∏–Ω–∞—Ü–∏–∏': 500
    },
    '—Ö–æ–ª—Å—Ç': {
        '–ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π': 800,
        '–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π': 700
    }
}

MIN_SIZE = 0.1
MAX_SIZE = 50.0
MIN_QUANTITY = 1
MAX_QUANTITY = 1000

# –®–∞–≥–∏ –¥–∏–∞–ª–æ–≥–∞
STEP_MATERIAL = 1
STEP_MATERIAL_TYPE = 2
STEP_WIDTH = 3
STEP_HEIGHT = 4
STEP_QUANTITY = 5
STEP_COMPLETED = 6

user_data = {}

# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==================== 

def parse_number(text: str) -> float:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ, –∑–∞–º–µ–Ω—è—è –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏"""
    try:
        return float(text.replace(',', '.'))
    except ValueError:
        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ====================
async def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.message.from_user.id if update.message else update.callback_query.from_user.id
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_data:
        del user_data[user_id]
    
    keyboard = [
        [InlineKeyboardButton("–ë–∞–Ω–µ—Ä", callback_data="–±–∞–Ω–µ—Ä")],
        [InlineKeyboardButton("–ü–ª–µ–Ω–∫–∞", callback_data="–ø–ª–µ–Ω–∫–∞")],
        [InlineKeyboardButton("–•–æ–ª—Å—Ç", callback_data="—Ö–æ–ª—Å—Ç")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_message = "üëã <b>–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞.</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª:"
    
    if update.message:
        await update.message.reply_text(welcome_message, reply_markup=reply_markup, parse_mode='HTML')
    else:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(welcome_message, reply_markup=reply_markup, parse_mode='HTML')

async def material_selection(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
    query = update.callback_query
    await query.answer()
    
    material = query.data
    user_data[query.from_user.id] = {
        'material': material,
        'step': STEP_MATERIAL_TYPE
    }
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–∏–ø–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    buttons = []
    for material_type in MATERIALS[material]:
        buttons.append([InlineKeyboardButton(material_type, callback_data=f"type_{material_type}")])
    
    reply_markup = InlineKeyboardMarkup(buttons)
    await query.edit_message_text(
        text=f"üñåÔ∏è <b>–í—ã–±—Ä–∞–Ω –º–∞—Ç–µ—Ä–∏–∞–ª:</b> {material}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==================== 
def format_price(price: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –º–µ–∂–¥—É —Ç—ã—Å—è—á–∞–º–∏"""
    return "{:,.2f}".format(price).replace(",", " ").replace(".", ",")

def calculate_cost(material: str, material_type: str, height: float, width: float, quantity: int) -> str:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ —Å –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º –≤—ã–≤–æ–¥–æ–º"""
    if material not in MATERIALS or material_type not in MATERIALS[material]:
        return "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω –º–∞—Ç–µ—Ä–∏–∞–ª"
    
    price_per_sqm = MATERIALS[material][material_type]
    area = height * width
    total_cost = area * price_per_sqm * quantity
    
    return (
        f"üìä <b>–ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç</b>\n\n"
        f"üñ®Ô∏è –ú–∞—Ç–µ—Ä–∏–∞–ª: {material} ({material_type})\n"
        f"üìè –†–∞–∑–º–µ—Ä: {width}–º √ó {height}–º | "
        f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç.\n\n"
        f"üíµ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å: {format_price(total_cost)} —Ä—É–±.</b>"
    )

async def material_type_selection(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
    query = update.callback_query
    await query.answer()
    
    material_type = query.data.replace('type_', '')
    user_id = query.from_user.id
    user_data[user_id]['material_type'] = material_type
    user_data[user_id]['step'] = STEP_WIDTH
    
    await query.edit_message_text(
        text=f"üñ®Ô∏è <b>–ú–∞—Ç–µ—Ä–∏–∞–ª:</b> {user_data[user_id]['material']} ({material_type})\n\n"
             f"–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É –≤ –º–µ—Ç—Ä–∞—Ö:",
        parse_mode='HTML'
    )

async def handle_message(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.message.from_user.id
    text = update.message.text

    # –ï—Å–ª–∏ —Ä–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
    if user_id in user_data and user_data[user_id].get('step') == STEP_COMPLETED:
        await update.message.reply_text(
            "üìå –†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –∫–æ–º–∞–Ω–¥–æ–π /start",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç", callback_data="restart")]
            ]),
            parse_mode='HTML'
        )
        return

    if user_id not in user_data:
        await update.message.reply_text("‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return

    try:
        current_step = user_data[user_id]['step']

        if current_step == STEP_WIDTH:
            width = parse_number(text)
            if not (MIN_SIZE <= width <= MAX_SIZE):
                raise ValueError(f"–®–∏—Ä–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {MIN_SIZE} –¥–æ {MAX_SIZE} –º")
            user_data[user_id]['width'] = width
            user_data[user_id]['step'] = STEP_HEIGHT
            await update.message.reply_text("üìè –í–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É –≤ –º–µ—Ç—Ä–∞—Ö:")

        elif current_step == STEP_HEIGHT:
            height = parse_number(text)
            if not (MIN_SIZE <= height <= MAX_SIZE):
                raise ValueError(f"–í—ã—Å–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {MIN_SIZE} –¥–æ {MAX_SIZE} –º")
            user_data[user_id]['height'] = height
            user_data[user_id]['step'] = STEP_QUANTITY
            await update.message.reply_text("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")

        elif current_step == STEP_QUANTITY:
            quantity = int(text)
            if not (MIN_QUANTITY <= quantity <= MAX_QUANTITY):
                raise ValueError(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç {MIN_QUANTITY} –¥–æ {MAX_QUANTITY} —à—Ç.")
            
            material = user_data[user_id]['material']
            material_type = user_data[user_id]['material_type']
            width = user_data[user_id]['width']
            height = user_data[user_id]['height']
            
            result = calculate_cost(material, material_type, height, width, quantity)
            user_data[user_id]['step'] = STEP_COMPLETED
            
            keyboard = [[InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç", callback_data="restart")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(result, reply_markup=reply_markup, parse_mode='HTML')

    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: {str(e)}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞! {str(e)}")

async def restart(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç'"""
    query = update.callback_query
    await query.answer()
    await start(update, context)

# ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    try:
        application = Application.builder().token(TOKEN).build()
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–±—Ä–æ—Å –≤–µ–±—Ö—É–∫–∞
        await application.bot.delete_webhook(drop_pending_updates=True)
        logger.info("‚úÖ –í–µ–±—Ö—É–∫ —Å–±—Ä–æ—à–µ–Ω, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã")

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (–≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥)
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CallbackQueryHandler(material_selection, pattern="^(–±–∞–Ω–µ—Ä|–ø–ª–µ–Ω–∫–∞|—Ö–æ–ª—Å—Ç)$"))
        application.add_handler(CallbackQueryHandler(material_type_selection, pattern="^type_"))
        application.add_handler(CallbackQueryHandler(restart, pattern="^restart$"))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        await application.run_polling()

    except telegram.error.Conflict as e:
        logger.error(f"üö® –ö–æ–Ω—Ñ–ª–∏–∫—Ç: {e}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ.")
    except Exception as e:
        logger.error(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    finally:
        if lock_file:
            lock_file.close()

if __name__ == '__main__':
    prevent_multiple_instances()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    asyncio.run(main())