from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, CallbackContext
from telegram.ext import filters

TOKEN = '7978164646:AAEbOwVCrJ4mfmKQKZ77Ynpvs1rRvxHSZQc'

materials = {
    '–±–∞–Ω–µ—Ä': 300,
    '–ø–ª–µ–Ω–∫–∞': 500,
    '—Ö–æ–ª—Å—Ç': 700
}

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
MIN_SIZE = 0.1
MAX_SIZE = 999999
MIN_QUANTITY = 1
MAX_QUANTITY = 1000

STEP_MATERIAL = 1
STEP_WIDTH = 2
STEP_HEIGHT = 3
STEP_QUANTITY = 4
STEP_COMPLETED = 5  # –ù–æ–≤—ã–π —à–∞–≥ - —Ä–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω

user_data = {}

def format_price(price: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –º–µ–∂–¥—É —Ç—ã—Å—è—á–∞–º–∏"""
    return "{:,.2f}".format(price).replace(",", " ").replace(".", ",")

def calculate_cost(material, height, width, quantity):
    if material not in materials:
        return "–û—à–∏–±–∫–∞: –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    material_cost = materials[material]
    area = height * width
    cost_per_item = area * material_cost
    total_cost = cost_per_item * quantity
    
    return (
        f"üìä <b>–ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç</b>\n\n"
        f"üé® –ú–∞—Ç–µ—Ä–∏–∞–ª: {material}\n"
        f"üìè –†–∞–∑–º–µ—Ä: {width}–º √ó {height}–º\n"
        f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç.\n\n"
        f"üíµ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å: {format_price(total_cost)} —Ä—É–±.</b>"
    )

async def start(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id if update.message else update.callback_query.from_user.id
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_data:
        del user_data[user_id]
    
    keyboard = [
        [InlineKeyboardButton("–ë–∞–Ω–µ—Ä", callback_data="–±–∞–Ω–µ—Ä")],
        [InlineKeyboardButton("–ü–ª–µ–Ω–∫–∞", callback_data="–ø–ª–µ–Ω–∫–∞")],
        [InlineKeyboardButton("–•–æ–ª—Å—Ç", callback_data="—Ö–æ–ª—Å—Ç")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_message = "üëã <b>–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞.</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª:"
    
    if update.message:
        await update.message.reply_text(welcome_message, reply_markup=reply_markup, parse_mode='HTML')
    else:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(welcome_message, reply_markup=reply_markup, parse_mode='HTML')

async def material_selection(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    
    material = query.data
    user_data[query.from_user.id] = {'material': material, 'step': STEP_WIDTH}
    
    await query.edit_message_text(
        text=f"üñåÔ∏è <b>–í—ã–±—Ä–∞–Ω –º–∞—Ç–µ—Ä–∏–∞–ª:</b> {material}\n\n–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É –≤ –º–µ—Ç—Ä–∞—Ö:",
        parse_mode='HTML'
    )

def parse_number(text: str) -> float:
    return float(text.replace(',', '.'))

async def handle_message(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    text = update.message.text

    # –ï—Å–ª–∏ —Ä–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π
    if user_id in user_data and user_data[user_id].get('step') == STEP_COMPLETED:
        await update.message.reply_text(
            "–†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –∫–æ–º–∞–Ω–¥–æ–π /start",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç", callback_data="restart")]
            ]),
            parse_mode='HTML'
        )
        return

    if user_id not in user_data:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return

    try:
        current_step = user_data[user_id]['step']

        if current_step == STEP_WIDTH:
            width = parse_number(text)
            if not (MIN_SIZE <= width <= MAX_SIZE):
                raise ValueError
            user_data[user_id]['width'] = width
            user_data[user_id]['step'] = STEP_HEIGHT
            await update.message.reply_text("üìè –í–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É –≤ –º–µ—Ç—Ä–∞—Ö:")

        elif current_step == STEP_HEIGHT:
            height = parse_number(text)
            if not (MIN_SIZE <= height <= MAX_SIZE):
                raise ValueError
            user_data[user_id]['height'] = height
            user_data[user_id]['step'] = STEP_QUANTITY
            await update.message.reply_text("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")

        elif current_step == STEP_QUANTITY:
            quantity = int(text)
            if not (MIN_QUANTITY <= quantity <= MAX_QUANTITY):
                raise ValueError
            
            material = user_data[user_id]['material']
            width = user_data[user_id]['width']
            height = user_data[user_id]['height']
            
            result = calculate_cost(material, height, width, quantity)
            
            # –ü–æ–º–µ—á–∞–µ–º —Ä–∞—Å—á–µ—Ç –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
            user_data[user_id]['step'] = STEP_COMPLETED
            
            keyboard = [[InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç", callback_data="restart")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                result,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )

    except ValueError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

async def restart(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    await start(update, context)

def main():
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(material_selection, pattern="^(–±–∞–Ω–µ—Ä|–ø–ª–µ–Ω–∫–∞|—Ö–æ–ª—Å—Ç)$"))
    application.add_handler(CallbackQueryHandler(restart, pattern="^restart$"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    application.run_polling()

if __name__ == '__main__':
    main()